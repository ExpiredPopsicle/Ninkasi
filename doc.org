* Prefixes

- nki* = Ninkasi internal
  - Called from inside VM code.
  - Not called from outside VM code.
    - Calling these directly instead of going through the nkx-prefixed
      functions will result in error handling code being skipped.

- nkx* = Ninkasi external
  - Wrappers around internal functions that set up error handlers
    before calling the wrapped function and cleaning them up before
    returning.
  - Called from outside the VM, by the host application.
  - NOT called from inside the VM.
    - Calling from inside the VM will cause the error handlers to be
      setup twice.

* Error handling

** Normal errors
TODO

** Catastrophic error handling

"Catastrophic" errors are generally out-of-memory conditions. The
hosting application can set a limit on the amount of memory the VM is
allowed to allocate (FIXME: currently set in
vm->limits.maxAllocatedMemory). When this memory OR the hosting
application address space is exhausted, an error handler will be
initiated. This sets a flag on the VM and returns (via longjmp) to the
last nkx* function, which then returns back to the hosting
application. Any further calls to nkx* functions will return without
doing anything.

Because the error handling for this is at such a low level, the VM
state may be invalid or incomplete when control is returned to the
hosting application. The allocation list inside the VM is handled at
the same level as these errors, and should always be consistent.
Cleaning up the VM with nkxVmDelete() will deallocate the VM and all
of the VM's own allocations, but no other interaction with the VM
should happen.

- Do not trust any pointer inside the VM to be a valid pointer.
- The allocation list is the only set of guaranteed valid pointers.
- The VM may be safely deleted with nkxVmDelete().

*** Detecting catastrophic failures
TODO
