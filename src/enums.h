#ifndef ENUMS_H
#define ENUMS_H

// ISO C doesn't allow forward declarations for enums, so we're just
// jamming all the enums for this system into this one file. It also
// doesn't allow C++ style comments but fuck it, whatever.

enum ValueType
{
    NK_VALUETYPE_INT,
    NK_VALUETYPE_FLOAT,
    NK_VALUETYPE_STRING,
    NK_VALUETYPE_FUNCTIONID,
    NK_VALUETYPE_OBJECTID,
    NK_VALUETYPE_NIL
};

enum Opcode
{
    OP_NOP = 0, // Leave this at zero so we can memset() sections of
                // code to zero.

    OP_ADD,
    OP_SUBTRACT,
    OP_MULTIPLY,
    OP_DIVIDE,
    OP_NEGATE,
    OP_MODULO,

    OP_PUSHLITERAL_INT,
    OP_PUSHLITERAL_FLOAT,
    OP_PUSHLITERAL_STRING,
    OP_PUSHLITERAL_FUNCTIONID,

    OP_POP,
    OP_POPN,

    OP_DUMP,

    OP_STACKPEEK,
    OP_STACKPOKE,

    OP_JUMP_RELATIVE,

    OP_CALL,
    OP_RETURN,

    OP_END,

    OP_JUMP_IF_ZERO,

    OP_GREATERTHAN,
    OP_LESSTHAN,
    OP_GREATERTHANOREQUAL,
    OP_LESSTHANOREQUAL,
    OP_EQUAL,
    OP_NOTEQUAL,
    OP_EQUALWITHSAMETYPE,
    OP_NOT,

    OP_AND,
    OP_OR,

    OP_CREATEOBJECT,

    OP_OBJECTFIELDGET,
    OP_OBJECTFIELDSET,

    // Stuff specific to foo.bar() syntax.
    OP_OBJECTFIELDGET_NOPOP,
    OP_PREPARESELFCALL,

    OP_PUSHNIL,

    OPCODE_REALCOUNT,

    // This must be a power of two.
    OPCODE_PADDEDCOUNT = 64
};

enum TokenType
{
    TOKENTYPE_INTEGER,
    TOKENTYPE_FLOAT,
    TOKENTYPE_PLUS,
    TOKENTYPE_MINUS,
    TOKENTYPE_MULTIPLY,
    TOKENTYPE_DIVIDE,
    TOKENTYPE_MODULO,
    TOKENTYPE_INCREMENT,
    TOKENTYPE_DECREMENT,
    TOKENTYPE_PAREN_OPEN,
    TOKENTYPE_PAREN_CLOSE,
    TOKENTYPE_BRACKET_OPEN,
    TOKENTYPE_BRACKET_CLOSE,
    TOKENTYPE_CURLYBRACE_OPEN,
    TOKENTYPE_CURLYBRACE_CLOSE,
    TOKENTYPE_STRING,
    TOKENTYPE_IDENTIFIER,
    TOKENTYPE_SEMICOLON,
    TOKENTYPE_ASSIGNMENT,
    TOKENTYPE_IF,
    TOKENTYPE_ELSE,
    TOKENTYPE_WHILE,
    TOKENTYPE_FOR,
    TOKENTYPE_AND,
    TOKENTYPE_OR,
    TOKENTYPE_DOT,

    TOKENTYPE_GREATERTHAN,
    TOKENTYPE_LESSTHAN,
    TOKENTYPE_GREATERTHANOREQUAL,
    TOKENTYPE_LESSTHANOREQUAL,
    TOKENTYPE_EQUAL,
    TOKENTYPE_NOTEQUAL,
    TOKENTYPE_EQUALWITHSAMETYPE,
    TOKENTYPE_NOT,

    TOKENTYPE_COMMA,

    TOKENTYPE_VAR,
    TOKENTYPE_FUNCTION,
    TOKENTYPE_RETURN,

    TOKENTYPE_NEWOBJECT,

    // These are for the foo.bar() syntax, specfically.
    TOKENTYPE_INDEXINTO_NOPOP,
    TOKENTYPE_FUNCTIONCALL_WITHSELF,

    TOKENTYPE_NIL,

    TOKENTYPE_BREAK,

    TOKENTYPE_INVALID,
};

#endif
