print("Test\n");


function crTestFunc(foo, bar)
{

    var sub = coroutine_create2(
        function() {
            for(var i = 0; i < 100; ++i) {
                print("Sub: ", i, "\n");
                coroutine_yield2();
            }
        });

    print("Foo1: ", foo, "\n");
    print("Bar1: ", bar, "\n");
    coroutine_resume2(sub);
    var yielded = coroutine_yield2(1234);
    print("Foo2: ", foo, "\n");
    print("Bar2: ", bar, "\n");
    print("Yie2: ", yielded, "\n");
    coroutine_resume2(sub);
    yielded = coroutine_yield2(1234);
    print("Foo3: ", foo, "\n");
    print("Bar3: ", bar, "\n");
    print("Yie3: ", yielded, "\n");
    coroutine_resume2(sub);
    yielded = coroutine_yield2();
    print("Foo4: ", foo, "\n");
    print("Bar4: ", bar, "\n");
    print("Yie4: ", yielded, "\n");
    coroutine_resume2(sub);
    yielded = coroutine_yield2(1234);
    print("Foo5: ", foo, "\n");
    print("Bar5: ", bar, "\n");
    print("Yie5: ", yielded, "\n");
    coroutine_resume2(sub);
    yielded = coroutine_yield2();
    print("Foo6: ", foo, "\n");
    print("Bar6: ", bar, "\n");
    print("Yie6: ", yielded, "\n");
    coroutine_resume2(sub);
    yielded = coroutine_yield2(1234);
    print("Foo7: ", foo, "\n");
    print("Bar7: ", bar, "\n");
    print("Yie7: ", yielded, "\n");
    coroutine_resume2(sub);
    yielded = coroutine_yield2();
    print("COROUTINE FINISHED\n");
    // for(var i = 0; i < 1000; ++i) {
    // }




}

// crTestFunc("asdf", "blah");
print("Creating coroutine...\n");
var cr = coroutine_create2(crTestFunc, "asdf", "blah");
print("Done.\n");




print("Resuming coroutine 1...\n");
var crRet = coroutine_resume2(cr); // Starts execution. Doesn't get to pass anything in.
print("Done: ", crRet, "\n");

print("Resuming coroutine 2...\n");
crRet = coroutine_resume2(cr, "yield2");
print("Done: ", crRet, "\n");

print("Resuming coroutine 3...\n");
crRet = coroutine_resume2(cr, "yield3");
print("Done: ", crRet, "\n");

print("Resuming coroutine x...\n");
crRet = coroutine_resume2(cr, "yieldx");
print("Done: ", crRet, "\n");

for(var i = 0; i < 10; ++i) {
    print("Resuming coroutine ", i, "...\n");
    crRet = coroutine_resume2(cr, "yieldx");
    print("Done: ", crRet, "\n");
}




// var val1 = coroutine_resume2(cr);
// print("val1: ", val1, "\n");

// var val2 = coroutine_resume2(cr);
// print("val2: ", val2, "\n");










// // crTestFunc("val1", "val2");


// // -++coroutine_resume2(cr)[0];
// // coroutine_resume2[0](cr);


var butt = object();

butt[0] = 1234;
print("butt[0]: ", butt[0], "\n");



// print("Yieldtest:  ", coroutine_yield2("yieldtest"), "\n");
// print("Resumetest: ", coroutine_resume2(cr, "resumetest"), "\n");


// print("butt[0]: ", butt[0], "\n");
// print("butt[0]: ", butt[0], "\n");
// print("butt[0]: ", butt[0], "\n");



// var recurseCr;
// function recurseTest()
// {
//     coroutine_resume2(recurseCr);
// }

// recurseCr = coroutine_create2(recurseTest);

// coroutine_resume2(recurseCr);

